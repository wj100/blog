{"pages":[],"posts":[{"title":"Enter passphrase for key(输入密码短语)","text":"解决办法：删除passphrase键入 ssh-keygen -p 会要求输入一遍私钥路径，照着后面的括号敲一遍就好然后Enter old passphrase: 输入Enter new passphrase：输入新的时候直接回车即可删除passphrase","link":"/2023/01/11/Enter%20passphrase%20for%20key(%E8%BE%93%E5%85%A5%E5%AF%86%E7%A0%81%E7%9F%AD%E8%AF%AD)/"},{"title":"Unable to prerender all routes(亲测有效)","text":"使用prerender-spa-plugin打包报错mac下这里设置为 headless: true,更换插件 yarn add @dreysolano/prerender-spa-plugin const PrerenderSPAPlugin = require('@dreysolano/prerender-spa-plugin'); 因为使用了webpack5 有些插件没有更新导致的","link":"/2023/01/11/Unable%20to%20prerender%20all%20routes(%E4%BA%B2%E6%B5%8B%E6%9C%89%E6%95%88)/"},{"title":"code ELIFECYCLE报错","text":"网上搜到的办法都是删除node_modules但是并没有用原来是正则表达式的问题用 new RegExp 的方式去创建即可将 reg=/(?&lt;=(sem\\/p|sem\\/m)).*?(?=\\.)/g 改为 reg=new RegExp(&quot;/(?&lt;=(sem\\/p|sem\\/m)).*?(?=\\\\.)/g&quot;) 注意.前面加了个\\","link":"/2023/01/11/code%20ELIFECYCLE%E6%8A%A5%E9%94%99/"},{"title":"craco打包优化","text":"本质还是webpack 1.查看包体积使用webpack-bundle-analyzer进行分析 const { BundleAnalyzerPlugin } = require('webpack-bundle-analyzer'); new BundleAnalyzerPlugin({ analyzerMode: 'server', analyzerHost: '127.0.0.1', analyzerPort: 8888, openAnalyzer: true, // 构建完打开浏览器 reportFilename: path.resolve(__dirname, `analyzer/index.html`), }), 2 使用splitChunks拆分代码plugins:[], configure: (webpackConfig, { env: webpackEnv, paths }) =&gt; { webpackConfig.optimization.splitChunks = { ...webpackConfig.optimization.splitChunks, cacheGroups: { base: { // 基本框架 chunks: 'all', test: /(react|react-dom|react-dom-router|axios)/, name: 'base', priority: 100, }, moment: { test: /[\\\\/]node_modules[\\\\/]moment[\\\\/]/, name: 'moment', priority: 90, }, // echarts: { // test: /(echarts)/, // name: 'echarts', // priority: 100, // }, commons: { chunks: 'all', // 将两个以上的chunk所共享的模块打包至commons组。 minChunks: 2, name: 'commons', priority: 80, }, }, }; return webpackConfig; } 3.使用babel-plugin-import按需引入 babel: { plugins: [ // 配置 babel-plugin-import ant按需加载 [ 'import', { libraryName: 'antd', libraryDirectory: 'es', style: 'true', }, 'antd', ], [ 'import', { libraryName: 'moment', libraryDirectory: 'es', style: 'true', }, 'moment', ], ], 使用图片懒加载 LazyLoadImageyarn add react-lazy-load-image-component css异步加载css文件的加载是会block网站渲染的 因此我们可以把css异步加载 具体方法 &lt;link href=&quot;73131f5.css&quot; rel=&quot;stylesheet&quot; media=&quot;jscourse&quot; onload=&quot;this.media='all'&quot; /&gt;","link":"/2023/01/11/craco%E6%89%93%E5%8C%85%E4%BC%98%E5%8C%96/"},{"title":"echarts可拖拽柱形图","text":"&lt;!DOCTYPE html&gt; &lt;html lang=&quot;en&quot;&gt; &lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;柱形图拖拽&lt;/title&gt; &lt;script src=&quot;https://cdn.staticfile.org/vue/2.2.2/vue.min.js&quot; type=&quot;text/javascript&quot;&gt;&lt;/script&gt; &lt;script src=&quot;http://echarts.baidu.com/examples/vendors/echarts/echarts.min.js?_v_=1526486305040&quot;&gt;&lt;/script&gt; &lt;/head&gt; &lt;body&gt; &lt;div id=&quot;app&quot;&gt; &lt;div id=&quot;chartTest&quot; style=&quot;width: 600px;height: 400px;&quot;&gt;&lt;/div&gt; &lt;/div&gt; &lt;script&gt; var vm = new Vue({ el: &quot;#app&quot;, data () { return { xAxisData: ['一','二','三'], //柱形数据数组 seriesDataMain: [1700, 1200, 300], //这里辅助柱形数据数组,相同length的0 seriesDataFz: [0, 0, 0], lineMax: [], lineMin: [], lineDataAll: [], }; }, methods: { chartTest () { let dom = document.getElementById('chartTest'); let myChart = echarts.init(dom); let yAxisData = this.lineMax; let lineMin = this.lineMin; let lineDataAll = this.lineDataAll; this.chartAction(myChart, yAxisData, lineMin, lineDataAll); }, chartAction (myChart, yAxisData, lineMin, lineDataAll) { let option = { tooltip: { triggerOn: 'none', formatter: function(params) { return 'X: ' + params.name + '&lt;br&gt;Y最大: ' + parseInt(params.data); } }, grid: { left: '3%', right: '4%', bottom: '3%', containLabel: true }, xAxis: { type: 'category', data: this.xAxisData }, yAxis: { type: 'value', max:3000, min:0, splitLine: { lineStyle: { color: '#DBDBDB', type: 'dashed' } }, axisLine: { show: true }, axisTick: { show: false } }, series: [ { id: 'line1', type: 'line', color: '#188df0', smooth: true, symbol: 'emptyCircle', symbolSize: 10, data: yAxisData, lineStyle: { color: &quot;transparent&quot; } }, { id: 'line2', type: 'line', color: 'transparent', itemStyle:{ opacity:0 }, smooth: true, symbol: 'emptyCircle', symbolSize: 10, data: lineMin, lineStyle: { color: &quot;transparent&quot; } }, { id: &quot;barMain&quot;, name: '主要', type: 'bar', stack: '总量', label: { normal: { show: true, position: 'inside' } }, data: this.seriesDataMain, itemStyle: { normal: { color: new echarts.graphic.LinearGradient( 0, 0, 0, 1, [ {offset: 0, color: '#83bff6'}, {offset: 0.5, color: '#188df0'}, {offset: 1, color: '#188df0'} ] ) }, emphasis: { color: new echarts.graphic.LinearGradient( 0, 0, 0, 1, [ {offset: 0, color: '#2378f7'}, {offset: 0.7, color: '#2378f7'}, {offset: 1, color: '#83bff6'} ] ) } }, barWidth: 20, }, ] }; myChart.setOption(option); // 拖拽 setTimeout(function() { myChart.setOption({ graphic: echarts.util.map(lineDataAll, function(item, dataIndex) { let position = myChart.convertToPixel('grid', item); return { id: dataIndex, type: 'circle', position: position, shape: { r: 5 }, invisible: true, draggable: true, ondrag: echarts.util.curry(onPointDragging, dataIndex), onmousemove: echarts.util.curry(showTooltip, dataIndex), onmouseout: echarts.util.curry(hideTooltip, dataIndex), ondragend: echarts.util.curry(onPointDragEnd, dataIndex), z: 100 }; }) }); }, 0); window.addEventListener('resize', updatePosition); let that = this; function updatePosition() { myChart.setOption({ graphic: echarts.util.map(lineDataAll, function(item, dataIndex) { return { position: myChart.convertToPixel('grid', item) }; }) }); } function showTooltip(dataIndex) { if (dataIndex &lt; that.lineDataAll.length/2) { myChart.dispatchAction({ type: 'showTip', seriesIndex: 0, dataIndex: dataIndex }); } else { let index = dataIndex - that.lineDataAll.length/2; myChart.dispatchAction({ type: 'showTip', seriesIndex: 0, dataIndex: index }); } } function hideTooltip(dataIndex) { myChart.dispatchAction({ type: 'hideTip' }); } function onPointDragging(dataIndex, dx, dy) { if (dataIndex &lt; lineDataAll.length/2) { /*最高点值不能小于最低点的值*/ if (myChart.convertFromPixel('grid', this.position)[1]-that.seriesDataFz[dataIndex]&gt;=0) { lineDataAll[dataIndex][1] = myChart.convertFromPixel('grid', this.position)[1]; yAxisData = []; for (let i=0;i&lt;(lineDataAll.length)/2;i++) { yAxisData.push(lineDataAll[i][1]); } console.log(yAxisData); myChart.setOption({ series: [{ id: 'line1', data: yAxisData },{ id: 'line2', data: lineMin }] }); } } } function onPointDragEnd(dataIndex, dx, dy) { myChart.setOption({ graphic: echarts.util.map(lineDataAll, function(item, dataIndex) { return { id: dataIndex, position: myChart.convertToPixel('grid', [dataIndex, item]) } }) }); that.seriesDataFz = lineMin; for (let i in yAxisData) { for (let j in that.seriesDataFz) { if (i==j) { that.seriesDataMain[i] = parseInt(yAxisData[i]) - parseInt(that.seriesDataFz[i]); } } } that.chartAction(myChart, yAxisData, lineMin, lineDataAll); } myChart.on('click', function (params) { that.inputValue = params.value; }); } }, mounted (){ for (let i in this.seriesDataFz) { this.lineMax.push(this.seriesDataFz[i]+this.seriesDataMain[i]); } console.log(this.lineMax); this.lineMin = this.seriesDataFz; // this.initChart(); this.lineDataAll= []; for (let i in this.xAxisData) { for (let j in this.lineMax) { if (i==j) { this.lineDataAll[i]=[this.xAxisData[i], this.lineMax[j]]; } } } for (let i in this.xAxisData) { for (let j in this.lineMin) { if (i==j) { let index = parseInt(i)+ parseInt(this.xAxisData.length); this.lineDataAll[index]=[this.xAxisData[i], this.lineMin[j]]; } } } console.log(this.lineDataAll); this.chartTest(); } }); &lt;/script&gt; &lt;/body&gt; &lt;/html&gt;","link":"/2023/01/11/echarts%E5%8F%AF%E6%8B%96%E6%8B%BD%E6%9F%B1%E5%BD%A2%E5%9B%BE/"},{"title":"ffmpeg转化视频格式 去水印","text":"转化格式ffmpeg -i xxx.flv -b:v 640k xxx.mp4去水印 参数代表坐标与尺寸ffmpeg -i “E:\\迅雷下载\\047.mp4” -vf “delogo=x=9:y=293:w=136:h=94” -c:a copy“47.mp4”https://blog.csdn.net/qq_34777982/article/details/124038072","link":"/2023/01/11/ffmpeg%E8%BD%AC%E5%8C%96%E8%A7%86%E9%A2%91%E6%A0%BC%E5%BC%8F%20%E5%8E%BB%E6%B0%B4%E5%8D%B0/"},{"title":"css实现icon动画效果","text":"预览链接 实现方案 ui将动画拆成n张图拼在一起 使用background-position属性控制变化 animation属性 steps(n) 将动画拆成n关键帧 上代码&lt;!DOCTYPE html&gt; &lt;html lang=&quot;en&quot;&gt; &lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt; &lt;title&gt;Document&lt;/title&gt; &lt;style&gt; @keyframes entery { 0% { background-position: 0 0; } to { background-position: 0 -4500px; } } @keyframes leave { 0% { background-position: 0 -4500px; } 100% { background-position: 0 0; } } .div{ width: 150px; height: 150px; border: 1px solid red; background-image: url(http://tva1.sinaimg.cn/large/0088t8Tlly1h71bmadw9rj308c76ce81.jpg); background-size: 150px; background-position: center 0; animation: leave 0.4s steps(15) forwards; } .div:hover{ animation: entery 0.4s steps(15) forwards; } &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;div class=&quot;div&quot;&gt;&lt;/div&gt; &lt;/body&gt; &lt;/html&gt;","link":"/2023/01/11/css%E5%AE%9E%E7%8E%B0icon%E5%8A%A8%E7%94%BB%E6%95%88%E6%9E%9C/"},{"title":"brew换源","text":"查看 brew.git 当前源$ cd “$(brew –repo)” &amp;&amp; git remote -vorigin https://github.com/Homebrew/brew.git (fetch)origin https://github.com/Homebrew/brew.git (push) 查看 homebrew-core.git 当前源$ cd “$(brew –repo homebrew/core)” &amp;&amp; git remote -vorigin https://github.com/Homebrew/homebrew-core.git (fetch)origin https://github.com/Homebrew/homebrew-core.git (push) 修改 brew.git 为阿里源$ git -C “$(brew –repo)” remote set-url originhttps://mirrors.aliyun.com/homebrew/brew.git 修改 homebrew-core.git 为阿里源$ git -C “$(brew –repo homebrew/core)” remote set-url originhttps://mirrors.aliyun.com/homebrew/homebrew-core.git zsh 替换 brew bintray 镜像$ echo ‘exportHOMEBREW_BOTTLE_DOMAIN=https://mirrors.aliyun.com/homebrew/homebrew-bottles’ ~/.zshrc$ source ~/.zshrc bash 替换 brew bintray 镜像$ echo ‘exportHOMEBREW_BOTTLE_DOMAIN=https://mirrors.aliyun.com/homebrew/homebrew-bottles’ ~/.bash_profile$ source ~/.bash_profile 刷新源$ brew update","link":"/2023/01/11/brew%E6%8D%A2%E6%BA%90/"},{"title":"mac电脑git clone提示没有权限","text":"公司发的mac，真香查看自己的用户名和邮箱git config --list 生成SSH密钥ssh-keygen -t rsa -C &quot;自己的Email地址“ 查看SSH（windows也是相同的步骤，查看SSH用的命令不一样而已，可以直接记事本打开） cat /Users/电脑用户名/.ssh/id_rsa.pub 最后把打印出来的key添加到github中setting–&gt;SHS and GPG keys—&gt;new SSH key 最后一步ssh -T git@github.com 输入yes 回车，会看到 Hi wjune211! You’ve successfully authenticated，这样就可以使用git了 有想换工作的同学可以找我内推哦不低于15k（前端，java，测试）","link":"/2023/01/11/mac%E7%94%B5%E8%84%91git%20clone%E6%8F%90%E7%A4%BA%E6%B2%A1%E6%9C%89%E6%9D%83%E9%99%90/"},{"title":"Hello World","text":"hello","link":"/2023/01/11/hello-world/"},{"title":"mac开发环境搭建","text":"安装githttps://git-scm.com/ 安装brew包管理工具 /bin/zsh -c “$(curl -fsSL https://gitee.com/cunkai/HomebrewCN/raw/master/Homebrew.sh)” 安装git node nginx。都可以用brew install xxx 打造终端 https://zhuanlan.zhihu.com/p/37195261","link":"/2023/01/11/mac%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"},{"title":"mac鼠标和触控板方向相同","text":"下载scrollreverserhttps://pilotmoon.com/scrollreverser/ 勾选方向自然设置","link":"/2023/01/11/mac%E9%BC%A0%E6%A0%87%E5%92%8C%E8%A7%A6%E6%8E%A7%E6%9D%BF%E6%96%B9%E5%90%91%E7%9B%B8%E5%90%8C/"},{"title":"nginx配合前端实现网站分流 ABtest","text":"前端随机生成0-99的cookie，通过nginx分配10%的流量nginx配置 前端生成cookie (function(){ function random(min, max) { return Math.floor(Math.random() * (max - min)) + min; } function setCookie(name, value, days) { // 设置cookie days设置过期时间 单位:天 不传默认是 cookie 在浏览器关闭时删除 var exp = new Date(); days = days || 30; exp.setTime(exp.getTime() + days * 24 * 60 * 60 * 1000); document.cookie = name + &quot;=&quot; + escape(value) + &quot;;expires=&quot; + exp.toGMTString() + ';path=/'; } function getCookie(name) { // 获取一个cookie var strCookie = document.cookie; var arr = strCookie.split(';'); for (var i = 0; i &lt; arr.length; i++) { var t = arr[i].split(&quot;=&quot;); if (t[0].trim() == name) { return t[1]; } }; return null; } if(!getCookie('pagetest')){ // alert(1) setCookie('pagetest',random(0,99)) location.reload(); } })()","link":"/2023/01/11/nginx%E9%85%8D%E5%90%88%E5%89%8D%E7%AB%AF%E5%AE%9E%E7%8E%B0%E7%BD%91%E7%AB%99%E5%88%86%E6%B5%81%20ABtest/"},{"title":"nginx基础使用及代理跨域","text":"nginx 根目录brew info nginx 一,下载解压(无需安装)路径不能出现中文下载地址 二,修改配置文件根目录&gt;conf&gt;nginx.confserver{}里面为一个服务,默认80,访问index.html server { listen 5000; server_name localhost; #charset koi8-r; #access_log logs/host.access.log main; location / { root html; index index.html index.htm; } 三,常见命令启动 start nginx 查看进程 tasklist /fi &quot;imagename eq nginx.exe&quot; 修改配置文件之后的重启 nginx -s reload 快速停止 nginx -s stop 有序停止 nginx -s quit 以上说的是作为容器部署项目,现在说说利用nginx跨域如果后台因为种种原因不能开放CORS,而jsonp又只能解决get请求在vue项目中,开发环境我们可以配置node代理跨域打包之后部署nginx反向代理跨域… 一,用node在本地起一个服务(端口为3000) 二,写一个简单的ajax请求,部署在nginx中(端口为5000) 三,发起请求后出现跨域问题因为客户端在5000端口,服务端在3000端口 四,配置代理(nginx.conf)将本服务器的地址转发为后台的接口地址,即可解决跨域 listen 5000; server_name localhost; #charset koi8-r; #access_log logs/host.access.log main; location / { root html; index index.html index.htm; } # 新加的 location /api { proxy_pass http://localhost:3000; # 后端接口 IP:port } 修改一下地址 五,前端跨域成功看看代理之后的地址还有很多种配置代理跨域的方法 个人认为这种比较简单 有想换工作的同学可以找我内推哦不低于15k（前端，java，测试）","link":"/2023/01/11/nginx%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8%E5%8F%8A%E4%BB%A3%E7%90%86%E8%B7%A8%E5%9F%9F/"},{"title":"mysql启动时报错---发现系统错误2，系统找不到指定的文件","text":"启动mysql时一直提示 发现系统错误2，系统找不到指定的文件，原因是之前启动XAMPP时修改了注册表的启动路径再改回来就可以了1，打开注册表方式cmd输入regedit2，3，这里填的其实也不是真的mysql路径而是bin目录下的mysqld，保存就可以启动了","link":"/2023/01/11/mysql%E5%90%AF%E5%8A%A8%E6%97%B6%E6%8A%A5%E9%94%99---%E5%8F%91%E7%8E%B0%E7%B3%BB%E7%BB%9F%E9%94%99%E8%AF%AF2%EF%BC%8C%E7%B3%BB%E7%BB%9F%E6%89%BE%E4%B8%8D%E5%88%B0%E6%8C%87%E5%AE%9A%E7%9A%84%E6%96%87%E4%BB%B6/"},{"title":"myUtils.js-工作中常用的工具函数","text":"文件下载export const download = (res, type, filename) =&gt; { // 创建blob对象，解析流数据 const blob = new Blob([res], { // 设置返回的文件类型 // type: 'application/pdf;charset=UTF-8' 表示下载文档为pdf，如果是word则设置为msword，excel为excel type: type }) // 这里就是创建一个a标签，等下用来模拟点击事件 const a = document.createElement('a') // 兼容webkix浏览器，处理webkit浏览器中href自动添加blob前缀，默认在浏览器打开而不是下载 const URL = window.URL || window.webkitURL // 根据解析后的blob对象创建URL 对象 const herf = URL.createObjectURL(blob) // 下载链接 a.href = herf // 下载文件名,如果后端没有返回，可以自己写a.download = '文件.pdf' a.download = filename document.body.appendChild(a) // 点击a标签，进行下载 a.click() // 收尾工作，在内存中移除URL 对象 document.body.removeChild(a) window.URL.revokeObjectURL(herf) } 判断真const isTrue = (k) =&gt; { if (typeof k === 'string') { return k === 'true'; } return !!k; } 过滤对象中的空值function filterNonNull(obj) { return Object.fromEntries(Object.entries(obj).filter(([k, v]) =&gt; v)); } const queryString=(qs.stringify(filterNonNull(query))) 忽略ts报错单行忽略 // @ts-ignore 忽略全文 // @ts-nocheck 取消忽略全文 // @ts-check 字符串转jsonfunction strToJson(str){ var json = (new Function(&quot;return &quot; + str))(); return json; } //兼容ie function strToJson(str){ if(!str){ return undefined } var json = eval('(' + str + ')'); return json; } 按字母给对象排序function objKeySort(obj) {//排序的函数 var newkey = Object.keys(obj).sort(); //先用Object内置类的keys方法获取要排序对象的属性名，再利用Array原型上的sort方法对获取的属性名进行排序，newkey是一个数组 var newObj = {};//创建一个新的对象，用于存放排好序的键值对 for (var i = 0; i &lt; newkey.length; i++) {//遍历newkey数组 newObj[newkey[i]] = obj[newkey[i]];//向新创建的对象中按照排好的顺序依次增加键值对 } return newObj;//返回排好序的新对象 } 移动端适配&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0&quot;&gt; 移动端隐藏滚动条html,body{ width: 100%; height: 100%; overflow: scroll;} html::-webkit-scrollbar, body::-webkit-scrollbar{width:0px;height:0px;} body{margin:0;} .yearReport-page::-webkit-scrollbar{width:0px;height:0px;} 获取屏幕缩放比function detectZoom() { var ratio = 0, screen = window.screen, ua = navigator.userAgent.toLowerCase(); if (window.devicePixelRatio !== undefined) { ratio = window.devicePixelRatio; } else if (~ua.indexOf('msie')) { if (screen.deviceXDPI &amp;&amp; screen.logicalXDPI) { ratio = screen.deviceXDPI / screen.logicalXDPI; } } else if (window.outerWidth !== undefined &amp;&amp; window.innerWidth !== undefined) { ratio = window.outerWidth / window.innerWidth; } if (ratio) { ratio = Math.round(ratio * 100); } return ratio/100; } echart响应式字体//获取屏幕宽度并计算比例.按1920传入size function fontSize(res) { let clientWidth = window.innerWidth || document.documentElement.clientWidth || document.body.clientWidth; if (!clientWidth) return; let fontSize = clientWidth / 1920; return res * fontSize; } rem自适应js//designWidth:设计稿的实际宽度值，需要根据实际设置 //maxWidth:制作稿的最大宽度值，需要根据实际设置 //这段js的最后面有两个参数记得要设置，一个为设计稿实际宽度，一个为制作稿最大宽度，例如设计稿为750，最大宽度为750，则为(750,750) ;(function(designWidth, maxWidth) { var doc = document, win = window, docEl = doc.documentElement, remStyle = document.createElement(&quot;style&quot;), tid; function refreshRem() { var width = docEl.getBoundingClientRect().width; maxWidth = maxWidth || 540; width&gt;maxWidth &amp;&amp; (width=maxWidth); var rem = width * 100 / designWidth; remStyle.innerHTML = 'html{font-size:' + rem + 'px;}'; } if (docEl.firstElementChild) { docEl.firstElementChild.appendChild(remStyle); } else { var wrap = doc.createElement(&quot;div&quot;); wrap.appendChild(remStyle); doc.write(wrap.innerHTML); wrap = null; } //要等 wiewport 设置好后才能执行 refreshRem，不然 refreshRem 会执行2次； refreshRem(); win.addEventListener(&quot;resize&quot;, function() { clearTimeout(tid); //防止执行两次 tid = setTimeout(refreshRem, 300); }, false); win.addEventListener(&quot;pageshow&quot;, function(e) { if (e.persisted) { // 浏览器后退的时候重新计算 clearTimeout(tid); tid = setTimeout(refreshRem, 300); } }, false); if (doc.readyState === &quot;complete&quot;) { doc.body.style.fontSize = &quot;16px&quot;; } else { doc.addEventListener(&quot;DOMContentLoaded&quot;, function(e) { doc.body.style.fontSize = &quot;16px&quot;; }, false); } })(750, 750); js随机色function randomHexColor() { //随机生成十六进制颜色 return '#' + ('00000' + (Math.random() * 0x1000000 &lt;&lt; 0).toString(16)).substr(-6); } jsonpfunction jsonp(url, data = {}, callback = 'callback') { //处理json对象，拼接url data.jsonpcallback = callback let params = [] for (let key in data) { params.push(key + '=' + data[key]) } let script = document.createElement('script') script.src = url + '?' + params.join('&amp;') document.body.appendChild(script) //返回Promise return new Promise((resolve, reject) =&gt; { window[callback] = data =&gt; { try { resolve(data) } catch (e) { reject(e) } finally { //移除script元素 script.parentNode.removeChild(script) // window[callback] = null delete window[callback] } } }) } 字节转化function bytesToSize(bytes:number) { if (bytes === 0) return '0 B'; const k = 1024; const sizes = ['B', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB']; const i = Math.floor(Math.log(bytes) / Math.log(k)); return (bytes / (k**i)).toFixed(2) + ' ' + sizes[i]; } 千位分字符function milliFormat(num) { return num &amp;&amp; num.toString() .replace(/\\d+/, function(s){ return s.replace(/(\\d)(?=(\\d{3})+$)/g, '$1,') }) } 删除url指定参数function removeURLParameter(url, parameter) { var urlparts = url.split('?'); if(urlparts.length &gt;= 2) { //参数名前缀 var prefix = encodeURIComponent(parameter) + '='; var pars = urlparts[1].split(/[&amp;;]/g); //循环查找匹配参数 for(var i = pars.length; i-- &gt; 0;) { if(pars[i].lastIndexOf(prefix, 0) !== -1) { //存在则删除 pars.splice(i, 1); } } return urlparts[0] + (pars.length &gt; 0 ? '?' + pars.join('&amp;') : ''); } return url; } css自定义属性/* 属性定义宽度 */ const data_w = document.querySelectorAll('[data-w]') for (let i = 0, length = data_w.length; i &lt; length; i++) { data_w[i].style.width = data_w[i].getAttribute('data-w') + 'px' } 获取cookiefunction getCookie(name){ var arr = document.cookie.match(new RegExp(&quot;(^| )&quot;+name+&quot;=([^;]*)(;|$)&quot;)); if(arr != null) return decodeURI(arr[2]); return null; } 写cookiefunction setCookie(cName, cValue, days) { var expires = new Date(); expires.setTime(expires.getTime() + parseInt(days) * 24 * 60 * 60 * 1000); document.cookie = cName + &quot;=&quot; + escape(cValue) + &quot;;expires=&quot; + expires.toGMTString()+&quot;;path=/;domain=xxx.cn&quot;; }; 判断客户端function isPC(){ let userAgentInfo = navigator.userAgent let Agents = new Array('Android', 'iPhone', 'SymbianOS', 'Windows Phone', 'iPad', 'iPod') let flag = true for (let v = 0; v &lt; Agents.length; v++) { if (userAgentInfo.indexOf(Agents[v]) &gt; 0) { flag = false; break } } return flag } 获取地址栏参数function getQueryString(name) { let reg = new RegExp(&quot;(^|&amp;)&quot; + name + &quot;=([^&amp;]*)(&amp;|$)&quot;, &quot;i&quot;); let r = window.location.search.substr(1).match(reg); if (r != null) { return unescape(r[2]); }; return null; } 正则域名校验/^([a-zA-Z\\d][a-zA-Z\\d-_]+\\.)+[a-zA-Z\\d-_][^ ]*$/ 匹配[开头]结尾/(?&lt;=\\[).*?(?=\\])/g str = str.match(/aaa([\\s\\S]*?)fff/)[1]; 匹配@之前str = str.match(/(\\S*)@/)[1]; 匹配@之后str = str.match(/@(\\S*)/)[1]; 正则提取ipconst a = /((2[0-4]\\d|25[0-5]|[01]?\\d\\d?)\\.){3}(2[0-4]\\d|25[0-5]|[01]?\\d\\d?)/ let str=&quot;dsfg[\\&quot;0.0.0.0/0\\&quot;],fs&quot; str.match(a) 正则提取邮箱[a-zA-Z0-9_]{3,20}@[a-zA-Z0-9]{2,10}[.](com|cn|org) var a1=/[\\w-|*]+@[\\w]+\\.[a-zA-Z0-9]+/ var str1=&quot;fasf[\\&quot;rr-o@dev.com\\&quot;]fkasf&quot; str1.match(a1) isTruefunction isTrue(k) { if (typeof k === 'string') { return k === 'true'; } return !!k; } 防抖函数/** * @desc 函数防抖 * @param func 函数 * @param wait 延迟执行毫秒数 * @param immediate true 表立即执行，false 表非立即执行 */ function debounce(func,wait,immediate) { let timeout; return function () { let context = this; let args = arguments; if (timeout) clearTimeout(timeout); if (immediate) { var callNow = !timeout; timeout = setTimeout(() =&gt; { timeout = null; }, wait) if (callNow) func.apply(context, args) } else { timeout = setTimeout(function(){ func.apply(context, args) }, wait); } } } 节流函数/** * @desc 函数节流 * @param func 函数 * @param wait 延迟执行毫秒数 * @param type 1 表时间戳版，2 表定时器版 */ function throttle(fn, wait = 500) { let prev = 0 return function() { let args = arguments let now = Date.now() if (now - prev &gt; wait) { console.log(this)//谁调用就指向谁 fn.apply(this, args) prev = now } } } 深拷贝函数const deepClone = obj =&gt; { let clone = obj; if (obj &amp;&amp; typeof obj === &quot;object&quot;) { clone = new obj.constructor(); Object.getOwnPropertyNames(obj).forEach( prop =&gt; (clone[prop] = deepClone(obj[prop])) ); } return clone; }; function clone(target, map = new Map()) { if (typeof target === 'object') { let cloneTarget = Array.isArray(target) ? [] : {}; if (map.get(target)) { return map.get(target); } map.set(target, cloneTarget); for (const key in target) { cloneTarget[key] = clone(target[key], map); } return cloneTarget; } else { return target; } }; 转时间格式,到秒/*new Date() * @params date * return str * */ function formatDateTime(date) { let y = date.getFullYear(); let m = date.getMonth() + 1; m = m &lt; 10 ? ('0' + m) : m; let d = date.getDate(); d = d &lt; 10 ? ('0' + d) : d; let h = date.getHours(); h=h &lt; 10 ? ('0' + h) : h; let minute = date.getMinutes(); minute = minute &lt; 10 ? ('0' + minute) : minute; let second=date.getSeconds(); second=second &lt; 10 ? ('0' + second) : second; return y + '-' + m + '-' + d+' '+h+':'+minute+':'+second; }; //时间戳格式化 timestampToTime(timestamp) { let date = new Date(timestamp);//时间戳为10位需*1000，时间戳为13位的话不需乘1000 let Y = date.getFullYear() + '-'; let M = (date.getMonth() + 1 &lt; 10 ? '0' + (date.getMonth() + 1) : date.getMonth() + 1) + '-'; let D = (date.getDate() &lt; 10 ? '0' + date.getDate() : date.getDate()) + ' '; let h = (date.getHours() &lt; 10 ? '0' + date.getHours() : date.getHours())+ ':'; let m = (date.getMinutes() &lt; 10 ? '0' + date.getMinutes() : date.getMinutes())+ ':'; let s = date.getSeconds() &lt; 10 ? '0' + date.getMinutes() : date.getMinutes(); return Y + M + D + h + m + s; }, 生成随机验证码function mkLinks(num){ var str=&quot;23QWERTYUIOPASDFGHJKLZXCVBNM1456789zxcvbnmasdfghjklqwertyuiop&quot;; var res=''; for(var i=0;i&lt;num;i++){ res+=str[Math.floor(Math.random()*str.length)]; } return res; } 删除数组里指定下标的元素删除指定下标-返回删除后的数组 与splice()相似-返回删除的数组 Array.prototype.delete = function (delIndex) { var temArray = []; for (var i = 0; i &lt; this.length; i++) { if (i != delIndex) { temArray.push(this[i]); } } return temArray; }; 点击切换函数function switchTab(btn) { for (let i = 0; i &lt; btn.length; i++) { btn[i].index = i; btn[i].onclick = function () { for (let j = 0; j &lt; btn.length; j++) { btn[j].classList.remove(&quot;isCheck&quot;) btn[this.index].classList.add(&quot;isCheck&quot;); } } } } js map 格式转化为对象function _strMapToObj(strMap){ let obj= Object.create(null); for (let[k,v] of strMap) { obj[k] = v; } return obj; } 时间戳转时间function timestampToTime(timestamp) { var date = new Date(timestamp * 1000);//时间戳为10位需*1000，时间戳为13位的话不需乘1000 var Y = date.getFullYear() + '-'; var M = (date.getMonth() + 1 &lt; 10 ? '0' + (date.getMonth() + 1) : date.getMonth() + 1) + '-'; var D = date.getDate() + ' '; var h = date.getHours() + ':'; var m = date.getMinutes() + ':'; var s = date.getSeconds(); return Y + M + D + h + m + s; } 一键复制/*一键复制函数*/ function copyUrl(data) { let url = data; let oInput = document.createElement('input'); oInput.value = url; document.body.appendChild(oInput); oInput.select(); // 选择对象; console.log(oInput.value) document.execCommand(&quot;Copy&quot;); // 执行浏览器复制命令 alert('复制成功') oInput.remove() } 初始化remfunction refreshRem() { var docEl = doc.documentElement; var width = docEl.getBoundingClientRect().width; var rem = width / 10; docEl.style.fontSize = rem + 'px'; flexible.rem = win.rem = rem; } win.addEventListener('resize', refreshRem); 获取url参数function getUrlParams(name) { // 不传name返回所有值，否则返回对应值 var url = window.location.search; if (url.indexOf('?') == 1) { return false; } url = url.substr(1); url = url.split('&amp;'); var name = name || ''; var nameres; // 获取全部参数及其值 for(var i=0;i&lt;url.length;i++) { var info = url[i].split('='); var obj = {}; obj[info[0]] = decodeURI(info[1]); url[i] = obj; } // 如果传入一个参数名称，就匹配其值 if (name) { for(var i=0;i&lt;url.length;i++) { for (const key in url[i]) { if (key == name) { nameres = url[i][key]; } } } } else { nameres = url; } // 返回结果 return nameres; } getParams(url) { const index = url.indexOf('?') + 1 const params = url.slice(index).split('&amp;') const obj={} for(let i =0;i&lt;params.length;i++){ obj[params[i].split(&quot;=&quot;)[0]]=params[i].split(&quot;=&quot;)[1] } return obj; } 计算坐标集中心点calculateCenter(lnglatarr) { let total = lnglatarr.length let X = 0, Y = 0, Z = 0 lnglatarr.forEach((lnglat, index) =&gt; { let lng = lnglat[0] * Math.PI / 180 let lat = lnglat[1].includes('#')?lnglat[2] * Math.PI / 180:lnglat[1] * Math.PI / 180 let x, y, z x = Math.cos(lat) * Math.cos(lng) y = Math.cos(lat) * Math.sin(lng) z = Math.sin(lat) X += x Y += y Z += z }) X = X / total Y = Y / total Z = Z / total let Lng = Math.atan2(Y, X) let Hyp = Math.sqrt(X * X + Y * Y) let Lat = Math.atan2(Z, Hyp) return [Lng * 180 / Math.PI, Lat * 180 / Math.PI] }, resetStylehtml{ /* 标准字体大小可以，在移动端使用的rem适配的话会动态改变。 */ font-size:14px; /* 使用IE盒模型（个人取舍，我一般设置width是这是盒子的真实大小，包括padding和border） */ box-sizing: border-box; } html,body{ /* 在有些手机浏览器中点击一个链接或着可点击元素的时候，会出现一个半透明的灰色背景； */ -webkit-tap-highlight-color: rgba(0, 0, 0, 0); /* 提升移动端滚动的体验效果 */ -webkit-overflow-scrolling: touch; overflow-scrolling: touch; /* 与浏览器窗口高度一致 */ height: 100%; } body{ /* 有些背景默认为浅灰色，所以统一设置为纯白 */ background: #fff; /* 照着antd上面来的，在公司就别用微软雅黑了，不建议字体使用rem。 */ font:14px,-apple-system,BlinkMacSystemFont,'Segoe UI','PingFang SC','Hiragino Sans GB','Microsoft YaHei', 'Helvetica Neue',Helvetica,Arial,sans-serif,'Apple Color Emoji','Segoe UI Emoji','Segoe UI Symbol' /* 使字体更加顺滑 */ -webkit-font-smoothing: antialiased; -moz-osx-font-smoothing: grayscale; } /* 去除浏览器默认的margin和padding, 自行删减一些不必要的标签 */ body, p, h1, h2, h3, h4, h5, h6, dl, dd, ul, ol, th, td, button, figure, input, textarea, form, pre, blockquote, figure{ margin: 0; padding: 0; } a{ /* 小手 */ cursor: pointer; /* 取消超链接的默认下划线 */ text-decoration:none; /* antd里面还做了 ， 看你团队需不需要这样的风格 */ transition: color 0.3s ease; } ol, ul{ /* 去除自带的ugly样式。 */ list-style:none } /* 这些节点部分属性没有继承父节点样式，所有继承一下，并取消outline，外轮廓的效果 */ a, h1, h2, h3, h4, h5, h6, input, select, button, textarea { font-family: inherit; font-size: inherit; font-weight: inherit; font-style: inherit; line-height: inherit; color: inherit; outline: none; } button, input[type='submit'], input[type='button'] { /* 可点击小手 */ cursor: pointer; } /* 取消部分浏览器数字输入控件的操作按钮 apperance可以改变控件的外观。 */ input[type='number'] { -moz-appearance: textfield; } input[type=number]::-webkit-inner-spin-button, input[type=number]::-webkit-outer-spin-button { margin: 0; -webkit-appearance: none; } /** * 删除Firefox中的内边框和填充。 */ button::-moz-focus-inner, [type=&quot;button&quot;]::-moz-focus-inner, [type=&quot;reset&quot;]::-moz-focus-inner, [type=&quot;submit&quot;]::-moz-focus-inner { border-style: none; padding: 0; } /** * 让html5中的hidden在IE10中正确显示 */ [hidden] { display: none; } template { /* 有些浏览器会显示template 不过template标签用的也少，自行取舍。 */ display: none; } 移动端css reset@charset &quot;utf-8&quot;; /* 禁用iPhone中Safari的字号自动调整 */ html { -webkit-text-size-adjust: 100%; -ms-text-size-adjust: 100%; } /* 去除iPhone中默认的input样式 */ input[type=&quot;submit&quot;], input[type=&quot;reset&quot;], input[type=&quot;button&quot;], input{-webkit-appearance:none; resize: none;} /* 取消链接高亮 */ body,div,ul,li,ol,h1,h2,h3,h4,h5,h6,input,textarea,select,p,dl,dt,dd,a,img,button,form,table,th,tr,td,tbody,article, aside, details,figcaption,figure,footer,header,hgroup, menu,nav,section{ -webkit-tap-highlight-color:rgba(0, 0, 0, 0); } /* 设置HTML5元素为块 */ article, aside, details,figcaption,figure,footer,header,hgroup, menu,nav,section { display: block; } /* 图片自适应 */ img { max-width: 100%; height: auto; width:auto\\9; /* ie8 */ -ms-interpolation-mode:bicubic;/*为了照顾ie图片缩放失真*/ } /* 初始化 */ body,div,ul,li,ol,h1,h2,h3,h4,h5,h6,input,textarea,select,p,dl,dt,dd,a,img,button,form,table,th,tr,td,tbody,article, aside, details,figcaption,figure,footer,header,hgroup, menu,nav,section{margin:0; padding:0; border:none;box-sizing: border-box;} body{font: normal 14px/1.5 Tahoma,&quot;Lucida Grande&quot;,Verdana,&quot;Microsoft Yahei&quot;,STXihei,hei;} em,i{font-style:normal;} strong{font-weight: normal;} .clearfix:after{content:&quot;&quot;; display:block; visibility:hidden; height:0; clear:both;} .clearfix{zoom:1;} a{text-decoration:none; color:#969696; font-family: '宋体',Microsoft YaHei,Tahoma,Arial,sans-serif;} a:hover{color:#fff; text-decoration:none;} ul,ol{list-style:none;} h1, h2, h3, h4, h5, h6{ font-size:100%; font-family: Microsoft YaHei;} img{border: none;}","link":"/2023/01/11/myUtils.js-%E5%B7%A5%E4%BD%9C%E4%B8%AD%E5%B8%B8%E7%94%A8%E7%9A%84%E5%B7%A5%E5%85%B7%E5%87%BD%E6%95%B0/"},{"title":"textarea多行邮箱格式校验","text":"效果代码 vue element const validMail = (rule, value, callback) =&gt; { if (!value) { callback(new Error('请输入邮箱')); } value = value.replace(/[\\n]/g, ','); const reg = RegExp(/^(?=.*\\.)(?=.*@).*$/); if (!value.includes(',')) { if (!reg.test(value)) { callback(new Error('邮箱格式错误')); } else { callback(); } } else { let flag = -1; value.split(',').map((mail, index) =&gt; { if (mail &amp;&amp; !reg.test(mail)) { flag = index; } }); if (flag !== -1) { callback(new Error(`第${flag + 1}行邮箱格式错误`)); } else { callback(); } } };","link":"/2023/01/11/textarea%E5%A4%9A%E8%A1%8C%E9%82%AE%E7%AE%B1%E6%A0%BC%E5%BC%8F%E6%A0%A1%E9%AA%8C/"},{"title":"vue实现选中li变色--小技巧","text":"在methods中写入一个方法 clickcategory(index){ // 这里我们传入一个当前值 this.categoryIndex = index } 然后需要在data里面注册一下 data() { return { categoryIndex: 0, //点击当前背景变成白色索引 } }, 在css中设置我们当前选中项为active的类名，并给与一个白色的背景颜色 .active { background: #fff } 接下来在html中绑定 &lt;li @click=&quot;clickCategory(index)&quot; :class=&quot;{active:categoryIndex==index}&quot;&gt; &lt;!-- 选中当前动态绑定class --&gt; &lt;/li&gt;","link":"/2023/01/11/vue%E5%AE%9E%E7%8E%B0%E9%80%89%E4%B8%ADli%E5%8F%98%E8%89%B2--%E5%B0%8F%E6%8A%80%E5%B7%A7/"},{"title":"vue项目打包之后,修改后台接口,以及生产环境和开发环境的接口配置","text":"场景:在公司开发时用的是后台搭建的服务器,但是拿到外面部署时用的是真实服务器,不想每次改一次ip就打包一次,而且去部署时也不一定提前知道对方的ip…无法现场打包 首先我们配置开发环境与生产环境接口地址,congif &gt; dev.env.js：开发环境congif &gt; prod.env.js：正式（生产）环境 这里的window.g.ApiUrl后面再讲,这里可以写成真实服务器ip 'use strict' module.exports = { NODE_ENV: '&quot;production&quot;', //生产环境的url API_ROOT: 'window.g.ApiUrl' } 'use strict' const merge = require('webpack-merge') const prodEnv = require('./prod.env') module.exports = merge(prodEnv, { NODE_ENV: '&quot;development&quot;', //开发环境的url API_ROOT: '&quot;http://192.168.2.32:8081/data-store&quot;' }) 然后在用到这两个地址的时候使用 process.env.API_ROOT,我这里是把地址存在vuex里面这样一来,webpack就会自动区分环境,npm run dev时用开发地址,npm run build时用线上地址 再说一下打包之后怎么修改配置,在任何地方部署都不需要重新打包第一步:在项目的static文件夹下新建config.js,内容如下目的是把地址存到window全局下 window.g = { AXIOS_TIMEOUT: 10000, ApiUrl: &quot;http://192.168.2.32:8081/data-store&quot;, // 配置服务器地址, ParentPage: { CrossDomainProxyUrl: '/Home/CrossDomainProxy', BtnsApi: '/api/services/app/Authorization/GetBtns', OrgsApi: '/api/services/app/authorization/GetOrgsByUserId' } } 第二步：在index.html里面引入这个config.js注意路径 &lt;script type=&quot;text/javascript&quot; src=&quot;./static/config.js&quot;&gt;&lt;/script&gt; 第三步:在任意处使用 window.g.ApiUrl 调用接口我这里是在生产环境的ip配置里调用的 'use strict' module.exports = { NODE_ENV: '&quot;production&quot;', //生产环境的url API_ROOT: 'window.g.ApiUrl' } 此方法能有效解决打包,接口配置等问题,亲测有效,不会把config.js也打包进去另外网上还有一种办法使用generate-asset-webpack-pluginhttps://www.jianshu.com/p/377bfd2d9034https://blog.csdn.net/qq_41409679/article/details/84878642尝试之后会有报错,可能是我操作不当","link":"/2023/01/11/vue%E9%A1%B9%E7%9B%AE%E6%89%93%E5%8C%85%E4%B9%8B%E5%90%8E,%E4%BF%AE%E6%94%B9%E5%90%8E%E5%8F%B0%E6%8E%A5%E5%8F%A3,%E4%BB%A5%E5%8F%8A%E7%94%9F%E4%BA%A7%E7%8E%AF%E5%A2%83%E5%92%8C%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E7%9A%84%E6%8E%A5%E5%8F%A3%E9%85%8D%E7%BD%AE/"},{"title":"vue基于element封装pro-table (搜索、表格、分页能力)","text":"&lt;template&gt; &lt;div class=&quot;page-box&quot;&gt; &lt;!-- 搜索选项 --&gt; &lt;el-form v-if=&quot;!!search&quot; class=&quot;search&quot; :model=&quot;searchModel&quot; :inline=&quot;true&quot; label-position=&quot;left&quot; :label-width=&quot;search.labelWidth&quot; ref=&quot;searchForm&quot; &gt; &lt;el-form-item v-for=&quot;item in search.fields&quot; :key=&quot;item.name&quot; :label=&quot;item.label&quot; :prop=&quot;item.name&quot; &gt; &lt;slot v-if=&quot;item.type === 'custom'&quot; :name=&quot;item.slot&quot; /&gt; &lt;el-select v-else-if=&quot;item.type === 'select'&quot; v-model=&quot;searchModel[item.name]&quot; :filterable=&quot;!!item.filterable&quot; :multiple=&quot;!!item.multiple&quot; clearable :placeholder=&quot;`请选择${item.label}`&quot; :style=&quot;{ width: search.inputWidth, ...item.style }&quot; &gt; &lt;el-option v-for=&quot;option of item.options&quot; :key=&quot;option.value&quot; :label=&quot;option.name&quot; :value=&quot;option.value&quot; &gt;&lt;/el-option&gt; &lt;/el-select&gt; &lt;el-radio-group v-model=&quot;searchModel[item.name]&quot; v-else-if=&quot;item.type === 'radio'&quot; :style=&quot;{ width: search.inputWidth, ...item.style }&quot; &gt; &lt;el-radio v-for=&quot;option of item.options&quot; :key=&quot;option.value&quot; :label=&quot;option.value&quot; &gt;{{ option.name }}&lt;/el-radio&gt; &lt;/el-radio-group&gt; &lt;el-radio-group v-model=&quot;searchModel[item.name]&quot; v-else-if=&quot;item.type === 'radio-button'&quot; :style=&quot;{ width: search.inputWidth, ...item.style }&quot; &gt; &lt;el-radio-button v-for=&quot;option of item.options&quot; :key=&quot;option.value&quot; :label=&quot;option.value&quot; &gt;{{ option.name }}&lt;/el-radio-button&gt; &lt;/el-radio-group&gt; &lt;el-checkbox-group v-model=&quot;searchModel[item.name]&quot; v-else-if=&quot;item.type === 'checkbox'&quot; :style=&quot;{ width: search.inputWidth, ...item.style }&quot; &gt; &lt;el-checkbox v-for=&quot;option of item.options&quot; :key=&quot;option.value&quot; :label=&quot;option.value&quot; &gt;{{ option.name }}&lt;/el-checkbox&gt; &lt;/el-checkbox-group&gt; &lt;el-checkbox-group v-model=&quot;searchModel[item.name]&quot; v-else-if=&quot;item.type === 'checkbox-button'&quot; :style=&quot;{ width: search.inputWidth, ...item.style }&quot; &gt; &lt;el-checkbox-button v-for=&quot;option of item.options&quot; :key=&quot;option.value&quot; :label=&quot;option.value&quot; &gt;{{ option.name }}&lt;/el-checkbox-button&gt; &lt;/el-checkbox-group&gt; &lt;el-date-picker v-else-if=&quot;item.type === 'date'&quot; v-model=&quot;searchModel[item.name]&quot; type=&quot;date&quot; value-format=&quot;yyyy-MM-dd&quot; :placeholder=&quot;`请选择${item.label}`&quot; :style=&quot;{ width: search.inputWidth, ...item.style }&quot; &gt;&lt;/el-date-picker&gt; &lt;el-date-picker v-else-if=&quot;item.type === 'datetime'&quot; v-model=&quot;searchModel[item.name]&quot; type=&quot;datetime&quot; value-format=&quot;yyyy-MM-dd HH:mm:ss&quot; clearable :placeholder=&quot;`请选择${item.label}`&quot; :style=&quot;{ width: search.inputWidth, ...item.style }&quot; &gt;&lt;/el-date-picker&gt; &lt;el-date-picker v-else-if=&quot;item.type === 'daterange'&quot; v-model=&quot;searchModel[item.name]&quot; type=&quot;daterange&quot; value-format=&quot;yyyy-MM-dd&quot; range-separator=&quot;-&quot; start-placeholder=&quot;开始日期&quot; end-placeholder=&quot;结束日期&quot; clearable @change=&quot;handleDateChange($event, item)&quot; :style=&quot;{ width: search.inputWidth, ...item.style }&quot; &gt;&lt;/el-date-picker&gt; &lt;el-date-picker v-else-if=&quot;item.type === 'datetimerange'&quot; v-model=&quot;searchModel[item.name]&quot; type=&quot;datetimerange&quot; value-format=&quot;yyyy-MM-dd HH:mm:ss&quot; range-separator=&quot;-&quot; start-placeholder=&quot;开始时间&quot; end-placeholder=&quot;结束时间&quot; clearable @change=&quot;handleDateChange($event, item)&quot; :style=&quot;{ width: search.inputWidth, ...item.style }&quot; &gt;&lt;/el-date-picker&gt; &lt;el-input-number v-else-if=&quot;item.type === 'number'&quot; v-model=&quot;searchModel[item.name]&quot; :placeholder=&quot;`请输入${item.label}`&quot; controls-position=&quot;right&quot; :min=&quot;item.min&quot; :max=&quot;item.max&quot; :style=&quot;{ width: search.inputWidth, ...item.style }&quot; /&gt; &lt;el-input v-else-if=&quot;item.type === 'textarea'&quot; type=&quot;textarea&quot; v-model=&quot;searchModel[item.name]&quot; clearable :placeholder=&quot;`请输入${item.label}`&quot; :style=&quot;{ width: search.inputWidth, ...item.style }&quot; &gt;&lt;/el-input&gt; &lt;el-input v-else v-model=&quot;searchModel[item.name]&quot; :placeholder=&quot;`请输入${item.label}`&quot; clearable :style=&quot;{ width: search.inputWidth, ...item.style }&quot; &gt;&lt;/el-input&gt; &lt;/el-form-item&gt; &lt;el-form-item class=&quot;search-btn&quot;&gt; &lt;el-button type=&quot;primary&quot; icon=&quot;el-icon-search&quot; @click=&quot;handleSearch&quot;&gt;查询&lt;/el-button&gt; &lt;el-button @click=&quot;handleReset&quot; icon=&quot;el-icon-refresh-right&quot;&gt;重置&lt;/el-button&gt; &lt;/el-form-item&gt; &lt;/el-form&gt; &lt;!-- title 和 工具栏 --&gt; &lt;div class=&quot;head&quot; v-if=&quot;!hideTitleBar&quot;&gt; &lt;slot name=&quot;title&quot;&gt; &lt;span class=&quot;title&quot;&gt;{{ title }}&lt;/span&gt; &lt;/slot&gt; &lt;div class=&quot;toolbar&quot;&gt; &lt;slot name=&quot;toolbar&quot;&gt;&lt;/slot&gt; &lt;/div&gt; &lt;/div&gt; &lt;!-- table表格栏 --&gt; &lt;div class=&quot;table&quot;&gt; &lt;el-table v-loading=&quot;loading&quot; :data=&quot;tableData&quot; :row-key=&quot;rowKey&quot; :tree-props=&quot;tree.treeProps&quot; :lazy=&quot;tree.lazy&quot; :load=&quot;tree.load&quot; tooltip-effect=&quot;dark&quot; stripe :border=&quot;border&quot; @selection-change=&quot;handleSelectionChange&quot; @row-click=&quot;handlerRowClick&quot; ref=&quot;table&quot; &gt; &lt;el-table-column v-for=&quot;item in columns&quot; :key=&quot;item.label&quot; :filter-method=&quot;item.filters &amp;&amp; filterHandler&quot; :show-overflow-tooltip=&quot;!item.wrap&quot; v-bind=&quot;item&quot; &gt; &lt;template #header=&quot;scope&quot; v-if=&quot;!!item.labelSlot&quot;&gt; &lt;slot :name=&quot;item.labelSlot&quot; v-bind=&quot;scope&quot;&gt;&lt;/slot&gt; &lt;/template&gt; &lt;template #default=&quot;scope&quot; v-if=&quot;!!item.tdSlot&quot;&gt; &lt;slot :name=&quot;item.tdSlot&quot; v-bind=&quot;scope&quot;&gt;&lt;/slot&gt; &lt;/template&gt; &lt;/el-table-column&gt; &lt;/el-table&gt; &lt;/div&gt; &lt;!-- 分页 --&gt; &lt;el-pagination v-if=&quot;paginationConfig.show &amp;&amp; total &gt; 0&quot; class=&quot;pagination&quot; :style=&quot;paginationConfig.style&quot; @size-change=&quot;handleSizeChange&quot; :current-page.sync=&quot;pageNum&quot; @current-change=&quot;handleCurrentChange&quot; :page-sizes=&quot;paginationConfig.pageSizes&quot; :page-size.sync=&quot;pageSize&quot; :layout=&quot;paginationConfig.layout&quot; :total=&quot;total&quot; &gt;&lt;/el-pagination&gt; &lt;/div&gt; &lt;/template&gt; &lt;script&gt; const getSearchModel = (search) =&gt; { const searchModel = {}; if (search &amp;&amp; search.fields) { search.fields.forEach((item) =&gt; { switch (item.type) { case 'checkbox': case 'checkbox-button': searchModel[item.name] = []; break; default: break; } if (item.defaultValue !== undefined) { searchModel[item.name] = item.defaultValue; // 日期范围和时间范围真实变量默认值 if ((item.type === 'daterange' || item.type === 'datetimerange') &amp;&amp; !!item.trueNames &amp;&amp; Array.isArray(item.defaultValue)) { item.defaultValue.forEach((val, index) =&gt; { searchModel[item.trueNames[index]] = val; }); } } }); } return searchModel; }; export default { components: {}, props: { // 请求数据的方法 // eslint-disable-next-line vue/require-default-prop request: { type: Function, }, // 表格标题 title: { type: String, default: '', }, // 是否隐藏标题栏 hideTitleBar: { type: Boolean, default: false, }, // 搜索表单配置，false表示不显示搜索表单 search: { type: [Boolean, Object], default: false, }, border: { type: Boolean, default: false, }, // 表头配置 columns: { type: Array, default: function (params) { return []; }, }, // 行数据的Key，同elementUI的table组件的row-key rowKey: { type: String, default: 'id', }, // 分页配置，false表示不显示分页 pagination: { type: [Boolean, Object], default: () =&gt; ({}), }, tree: { type: Object, default: () =&gt; ({}), }, }, data() { let paginationConfig = { show: false, }; if (typeof this.pagination === 'object') { const { layout, pageSizes, style } = this.pagination; paginationConfig = { show: true, layout: layout || 'total, sizes, prev, pager, next, jumper', pageSizes: pageSizes || [10, 20, 30, 40, 50, 100], style: style || {}, }; } return { searchModel: getSearchModel(this.search), loading: false, tableData: [], total: 0, pageNum: 1, pageSize: (!!this.pagination &amp;&amp; this.pagination.pageSize) || 10, paginationConfig, }; }, created() { // 请求列表数据 this.getTableData(); }, methods: { // 请求列表数据 async getTableData() { this.loading = true; const searchModel = this.optimizeFields(this.search); const { data, total } = await this.request({ pageNum: this.pageNum, pageSize: this.pageSize, ...searchModel, }); this.loading = false; this.tableData = data; this.total = total; }, // 搜索 handleSearch() { this.pageNum = 1; this.getTableData(); }, // 重置函数 handleReset() { if (JSON.stringify(this.searchModel) === '{}') { return; } this.pageNum = 1; this.searchModel = getSearchModel(this.search); this.getTableData(); }, // 刷新 refresh() { this.getTableData(); }, // 优化搜索字段， // 1、如果搜索配置有transform处理函数，执行transform // 2、删除日期范围默认的name字段 optimizeFields(search) { const searchModel = JSON.parse(JSON.stringify(this.searchModel)); if (search &amp;&amp; search.fields) { search.fields.forEach((item) =&gt; { if (!searchModel.hasOwnProperty(item.name)) { return; } // eslint-disable-next-line no-extra-boolean-cast if (!!item.transform) { searchModel[item.name] = item.transform(searchModel[item.name]); } if ((item.type === 'daterange' || item.type === 'datetimerange') &amp;&amp; !!item.trueNames) { delete searchModel[item.name]; } }); } return searchModel; }, // 当前页变化 handleCurrentChange(page) { this.getTableData(); }, // 改变每页size数量 handleSizeChange(value) { this.pageNum = 1; this.getTableData(); }, /* 行点击 */ handlerRowClick(e){ this.$emit('rowClick', e); }, // 全选 handleSelectionChange(arr) { this.$emit('selectionChange', arr); }, // 过滤方法 filterHandler(value, row, column) { const property = column['property']; return row[property] === value; }, // 日期范围 handleDateChange(value, item) { if (!item.trueNames) { return; } // eslint-disable-next-line no-extra-boolean-cast if (!!value) { value.forEach((val, index) =&gt; { this.searchModel[item.trueNames[index]] = val; }); } else { item.trueNames.forEach((key) =&gt; { delete this.searchModel[key]; }); } }, }, }; &lt;/script&gt; &lt;style lang=&quot;scss&quot; scoped&gt; .page-box { width: 100%; box-sizing: border-box; .search { padding: 20px 20px 0; background: #fff; margin-bottom: 10px; display: flex; flex-wrap: wrap; .el-form-item { margin-bottom: 20px; } .search-btn { margin-left: auto; } ::v-deep { .el-input-number .el-input__inner { text-align: left; } } } .head { display: flex; justify-content: space-between; align-items: center; padding: 20px 20px 0; background: #fff; .title { font-size: 16px; } } .table { padding: 20px; background: #fff; ::v-deep th { background: #f6f6f6; color: rgba(0, 0, 0, 0.85); } } .pagination { padding: 0 20px 20px; background: #fff; text-align: right; :last-child { margin-right: 0; } } } &lt;/style&gt;","link":"/2023/01/11/vue%E5%9F%BA%E4%BA%8Eelement%E5%B0%81%E8%A3%85pro-table%20(%E6%90%9C%E7%B4%A2%E3%80%81%E8%A1%A8%E6%A0%BC%E3%80%81%E5%88%86%E9%A1%B5%E8%83%BD%E5%8A%9B)/"},{"title":"vue项目打包之后样式与本地不一致","text":"最近公司做的这个项目，要大量修改element里面的css样式，所以项目打包之后 会出现样式和本地开发的时候样式有很多不一样，原因可能是css加载顺序有问题，样式被覆改了。 所以在mian.js里面这样修改：‘./APP’和’./router’放在element css的后面，router放到最后 还有就是每个vue组件里的style要加scoped,这很关键，起到css不被组件之间重叠的作用。","link":"/2023/01/11/vue%E9%A1%B9%E7%9B%AE%E6%89%93%E5%8C%85%E4%B9%8B%E5%90%8E%E6%A0%B7%E5%BC%8F%E4%B8%8E%E6%9C%AC%E5%9C%B0%E4%B8%8D%E4%B8%80%E8%87%B4/"},{"title":"【算法】数组转化为树","text":"递归let arr = [ {id: 1, name: '部门1', pid: 0}, {id: 2, name: '部门2', pid: 1}, {id: 3, name: '部门3', pid: 1}, {id: 4, name: '部门4', pid: 3}, {id: 5, name: '部门5', pid: 4}, ] /** * 递归查找，获取children */ const getChildren = (data, result, pid) =&gt; { for (const item of data) { if (item.pid === pid) { const newItem = {...item, children: []}; result.push(newItem); getChildren(data, newItem.children, item.id); } } } /** * 转换方法 */ const arrayToTree = (data, pid) =&gt; { const result = []; getChildren(data, result, pid) return result; } arrayToTree (arr,0) map&lt;script&gt; let arr = [ {id: 1, name: '部门1', pid: 0}, {id: 2, name: '部门2', pid: 1}, {id: 3, name: '部门3', pid: 1}, {id: 4, name: '部门4', pid: 3}, {id: 5, name: '部门5', pid: 4}, ] function arrayToTree(items) { const result = []; // 存放结果集 const itemMap = {}; // // 先转成map存储 for (const item of items) { itemMap[item.id] = {...item, children: []} } for (const item of items) { if (item.pid === 0) { result.push(itemMap[item.id]); } else { itemMap[item.pid].children.push(itemMap[item.id]) console.log(item.pid) } } return result; } console.log(JSON.stringify(arrayToTree(arr))) &lt;/script&gt; 最优function arrayToTree(items) { const result = []; // 存放结果集 const itemMap = {}; // for (const item of items) { const id = item.id; const pid = item.pid; if (!itemMap[id]) { itemMap[id] = { children: [], } } itemMap[id] = { ...item, children: itemMap[id]['children'] } const treeItem = itemMap[id]; if (pid === 0) { result.push(treeItem); } else { if (!itemMap[pid]) { itemMap[pid] = { children: [], } } itemMap[pid].children.push(treeItem) } } return result; }","link":"/2023/01/11/%E3%80%90%E7%AE%97%E6%B3%95%E3%80%91%E6%95%B0%E7%BB%84%E8%BD%AC%E5%8C%96%E4%B8%BA%E6%A0%91/"},{"title":"前端劝退工程师","text":"None","link":"/2023/01/11/%E5%89%8D%E7%AB%AF%E5%8A%9D%E9%80%80%E5%B7%A5%E7%A8%8B%E5%B8%88/"},{"title":"原生js实现自定义样式的下拉选择","text":"预览 &lt;!DOCTYPE html&gt; &lt;html lang=&quot;en&quot;&gt; &lt;head&gt; &lt;meta charset=&quot;UTF-8&quot; /&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot; /&gt; &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot; /&gt; &lt;title&gt;Static Template&lt;/title&gt; &lt;/head&gt; &lt;style&gt; @charset &quot;UTF-8&quot;; * { margin: 0; padding: 0; box-sizing: border-box; } li { list-style: none; } /*下拉框样式*/ #qy-select { background: #fff; width: 120px; height: 28px; font-family: PingFangSC, &quot;Microsoft YaHei&quot;, sans-serif; font-size: 14px; color: #232d47; border: 1px rgba(38, 42, 51, 0.16) solid; border-radius: 4px; user-select: none; z-index: 9; } #qy-select &gt; li { height: 100%; } #qy-select .select-head { overflow: hidden; width: 100%; height: 100%; box-sizing: border-box; padding: 0 10px; line-height: 28px; display: flex; justify-content: space-around; } #qy-select .select-head &gt; span { height: 100%; display: flex; align-items: center; } #qy-select .select-head .select-icon { width: 8px; background: url(&quot;https://cowork-storage-public-cdn.lx.netease.com/common/2022/04/20/dd5d156dc30542f9b1de0349948eff8a.png&quot;) no-repeat center; } #qy-select .select-head .select-head-cont { float: left; } #qy-select .select-head .select-icon { float: right; } #qy-select .option { margin-top: 1px; padding: 8px 0; width: 100%; color: #232d47; background: #fff; text-align: center; border: 1px #cfcfcf solid; display: none; border-radius: 4px; } #qy-select .option .option-item { height: 32px; line-height: 32px; } #qy-select .option-item:hover { background: #f0f0f1; color: #386ee7; } #qy-select:hover { cursor: default; } &lt;/style&gt; &lt;body&gt; &lt;ul id=&quot;qy-select&quot; class=&quot;g-price-edit-account-select&quot;&gt; &lt;li&gt; &lt;div class=&quot;select-head&quot;&gt; &lt;span class=&quot;select-head-cont&quot;&gt;&lt;/span&gt; &lt;span class=&quot;select-icon&quot;&gt;&lt;/span&gt; &lt;/div&gt; &lt;ul class=&quot;option&quot;&gt; &lt;li class=&quot;option-item&quot; value=&quot;a5&quot; default=&quot;true&quot;&gt;5账户/年&lt;/li&gt; &lt;li class=&quot;option-item&quot; value=&quot;a20&quot;&gt;20账户/年&lt;/li&gt; &lt;li class=&quot;option-item&quot; value=&quot;a50&quot;&gt;50账户/年&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/body&gt; &lt;/html&gt; &lt;script type=&quot;text/javascript&quot;&gt; (function () { /* 下拉选择框 */ var _selects = document.querySelectorAll(&quot;#qy-select&quot;); _selects.forEach((_select, index) =&gt; { var selectHead = _select.getElementsByClassName(&quot;select-head&quot;)[0]; var selectHeadCont = _select.getElementsByClassName(&quot;select-head-cont&quot;); var Option = _select.getElementsByClassName(&quot;option&quot;)[0]; var optionItem = _select.querySelectorAll(&quot;.option-item&quot;); console.log(optionItem); // 默认选中 optionItem.forEach((item, index) =&gt; { if (item.getAttribute(&quot;default&quot;)) { selectHeadCont[0].innerHTML = item.innerHTML; selectHeadCont[0].setAttribute(&quot;value&quot;, item.getAttribute(&quot;value&quot;)); } }); /*出现下拉框*/ _select.addEventListener( &quot;mouseenter&quot;, function () { Option.style.display = &quot;block&quot;; }, false ); /*消失下拉框*/ _select.addEventListener( &quot;mouseleave&quot;, function () { Option.style.display = &quot;none&quot;; }, false ); /*点击选项后消失下拉框*/ var len = optionItem.length; for (var i = 0; i &lt; len; i++) { optionItem[i].index = i; optionItem[i].addEventListener( &quot;click&quot;, function () { selectHeadCont[0].innerHTML = optionItem[this.index].innerHTML; selectHeadCont[0].setAttribute( &quot;value&quot;, optionItem[this.index].getAttribute(&quot;value&quot;) ); Option.style.display = &quot;none&quot;; }, false ); } }); })(); &lt;/script&gt;","link":"/2023/01/11/%E5%8E%9F%E7%94%9Fjs%E5%AE%9E%E7%8E%B0%E8%87%AA%E5%AE%9A%E4%B9%89%E6%A0%B7%E5%BC%8F%E7%9A%84%E4%B8%8B%E6%8B%89%E9%80%89%E6%8B%A9/"},{"title":"webpack常用loader和plugin","text":"url-loader 将图片转化为base64 （url-loader包含file-loader） file-loader 将url-loader不能转化的copy出来 css-loader 解析js中 import的css文件 style-loader 将css-loader解析的css生成style标签 html-loader 检测html文件中的标签如 img ，再使用url-loader处理 保证路径正确 mini-css-extract-plugin 将css-loader生成的css 放入单独的css文件 再结合html-webpack-plugin 通过link方式引入样式 html-webpack-plugin 创建一个html 文件，并把webpack 打包后的静态文件自动插入到这个html 文件当中","link":"/2023/01/11/webpack%E5%B8%B8%E7%94%A8loader%E5%92%8Cplugin/"},{"title":"win10开启ssh-agent","text":"右键“我的电脑”（Windows 10上为“此电脑”），选择“管理”菜单项，打开计算机管理窗口。 左栏选择服务； 右栏中找到OpenSSH Authentication Agent服务； 双击打开设置界面，将启动类型由禁用改为自动； 点击应用，这时才可以手动启动和停止agent服务； 点击启动按钮，启动agent服务。","link":"/2023/01/11/win10%E5%BC%80%E5%90%AFssh-agent/"},{"title":"zsh报错 Insecure completion-dependent directories detected","text":"错误：Insecure completion-dependent directories detected在vi ~/.zshrc头部添加 ZSH_DISABLE_COMPFIX=true 没用的情况下解决方法终端输入 compaudit | xargs chmod g-w,o-w /home/用户名称/.oh-my-zsh/custom/plugins/zsh-autosuggestions 解决","link":"/2023/01/11/zsh%E6%8A%A5%E9%94%99%20Insecure%20completion-dependent%20directories%20detected/"},{"title":"后端返回文件流","text":"记得请求时加上method: “get”,responseType:‘blob’, // 这里很重要 把拿到的流传进下面的方法 function downloadFile(obj, name, suffix) { const url = window.URL.createObjectURL(new Blob([obj])); const link = document.createElement(&quot;a&quot;); link.style.display = &quot;none&quot;; link.href = url; const fileName = parseTime(new Date()) + &quot;-&quot; + name + &quot;.&quot; + suffix; link.setAttribute(&quot;download&quot;, fileName); document.body.appendChild(link); link.click(); document.body.removeChild(link); }","link":"/2023/01/11/%E5%90%8E%E7%AB%AF%E8%BF%94%E5%9B%9E%E6%96%87%E4%BB%B6%E6%B5%81/"},{"title":"各平台ua","text":"个人微信MicroMessenger 企业微信wxwork QQMQQBrowser 钉钉DingTalk 支付宝AlipayClient 飞书lark 可以使用小写ua = navigator.userAgent.toLowerCase();","link":"/2023/01/11/%E5%90%84%E5%B9%B3%E5%8F%B0ua/"},{"title":"原生js拖拽滑动条","text":"&lt;!DOCTYPE html&gt; &lt;html lang=&quot;en&quot;&gt; &lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt; &lt;title&gt;Document&lt;/title&gt; &lt;style&gt; #wrap{ width: 500px; height: 10px; background-color: red; position: relative; } .bar_container{ width: 100%; height: 100%; background-color: aqua; } .bar_into{ height: 100%; background-color: black; /* width: 100px; */ width: 0; } .bar_drag{ width: 10px; height: 10px; background-color: blue; position: absolute; cursor: default; top: 0;left: 0; } .bar_text{ color: black; margin-top: 50px; } .xxx{ /* background-color: red; */ width: 100%; display: flex; justify-content: space-between; cursor: default; } &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;div class=&quot;bar_wrap&quot; id=&quot;wrap&quot;&gt;&lt;!--外包裹元素--&gt; &lt;div class=&quot;bar_container&quot;&gt;&lt;!--滑动条--&gt; &lt;div class=&quot;bar_into&quot;&gt;&lt;/div&gt;&lt;!--滑动痕迹--&gt; &lt;/div&gt; &lt;div class=&quot;bar_drag&quot;&gt;&lt;!--滑块--&gt; &lt;div class=&quot;bar_text&quot;&gt;&lt;/div&gt;&lt;!--文本--&gt; &lt;/div&gt; &lt;div class=&quot;xxx&quot;&gt; &lt;span&gt;0&lt;/span&gt; &lt;span&gt;100&lt;/span&gt; &lt;span&gt;200&lt;/span&gt; &lt;span&gt;300&lt;/span&gt; &lt;span&gt;400&lt;/span&gt; &lt;span&gt;500&lt;/span&gt; &lt;/div&gt; &lt;/div&gt; &lt;/body&gt; &lt;script&gt; //获取外包裹元素 var eBarWrap = document.getElementById('wrap'); //获取滑动条 var eBarCon = eBarWrap.getElementsByClassName('bar_container')[0]; //获取滑动痕迹元素 var eBarInto = eBarWrap.getElementsByClassName('bar_into')[0]; //获取滑块 var eBarDrag = eBarWrap.getElementsByClassName('bar_drag')[0]; //获取文本元素 var eBarText = eBarWrap.getElementsByClassName('bar_text')[0]; eBarText.innerHTML = 0; var nMax = eBarCon.offsetWidth - eBarDrag.offsetWidth; //滑块添加拖拽事件 eBarDrag.addEventListener('mousedown',function(event){ //初始化鼠标开始拖拽的点击位置 var nInitX = event.clientX; //初始化滑块位置 var nInitLeft = this.offsetLeft; //页面绑定鼠标移动事件 document.onmousemove = event=&gt;{ //鼠标移动时取消默认行为，避免选中其他元素或文字 event.preventDefault(); //获取鼠标移动后滑块应该移动到的位置 let nX = event.clientX - nInitX + nInitLeft; //限制滑块最大移动位置 if(nX&gt;=nMax){ nX = nMax; } //限制滑块最小移动位置 if(nX&lt;=0){ nX = 0; } //修改滑块位置（因为用的是箭头函数，所以this还是指向滑块） this.style.left = nX + 'px'; //修改滑动痕迹宽度 console.log('nx---',nX) eBarInto.style.width = nX + this.offsetWidth/2 + 'px'; //修改文本数值 eBarText.innerHTML = Math.ceil(nX/nMax*100)/0.2; }; //鼠标松开绑定事件，取消页面上所有事件 document.onmouseup = function(event){ document.onmousemove = null; document.onmouseup = null; } }); //滑动条添加点击事件 eBarCon.addEventListener('click',function(event){ //设置滑动条位置 var nLeft = this.offsetLeft; //获取有定位的父元素 var eParent = this.offsetParent; //循环所有有定位的父元素 while(eParent){ //添加定位父元素offsetLeft值，用于准确定位滑动条与页面左侧的距离 nLeft += eParent.offsetLeft; //再次获取父元素外的定位父元素 eParent = eParent.offsetParent; } //计算滑块位置 var nX = event.clientX - nLeft; //修改滑块位置 eBarDrag.style.left = nX +'px'; //修改滑动痕迹宽度 eBarInto.style.width = nX + eBarDrag.offsetWidth/2 + 'px'; //修改文本数值 eBarText.innerHTML = Math.ceil(nX/nMax*100)/10 }); &lt;/script&gt; &lt;/html&gt;","link":"/2023/01/11/%E5%8E%9F%E7%94%9Fjs%E6%8B%96%E6%8B%BD%E6%BB%91%E5%8A%A8%E6%9D%A1/"},{"title":"如何在vue项目中定义公共的less变量，在组件中使用","text":"想把变量抽到一个公共的less文件中，然后在项目的各个组件都可以使用，试了很多方法都报错 vue-cli2.x一，安装loader npm install sass-resources-loader --save-dev 二，添加代码到build 的utils.js中exports.cssLoaders = function (options) {}中 function lessResourceLoader() { var loaders = [ cssLoader, 'less-loader', { loader: 'sass-resources-loader', options: { resources: [ path.resolve(__dirname, '../src/assets/styles/common.less'), ] } } ]; if (options.extract) { return ExtractTextPlugin.extract({ use: loaders, fallback: 'vue-style-loader' }) } else { return ['vue-style-loader'].concat(loaders) } } ps：path.resolve(__dirname, ‘…/src/assets/styles/common.less’)为自己对应的文件 然后后面将 return{} 块中的 less: generateLoaders(‘less’) 替换成上面自定义的函数 less:lessResourceLoader()最后重启服务 less生效！！然后发现不需要在main.js里引入，也不需要在app.vue里引入 vue-cli3及以上安装loader vue add style-resources-loader vue.cogfig.js添加以下代码 const path = require(&quot;path&quot;);//这一段需要自行添加 module.exports = { pluginOptions: { 'style-resources-loader': { preProcessor: 'less', patterns: [ path.resolve(__dirname, &quot;src/style/global.less&quot;)//需要自行添加，这里的路径不要写错了 ] } } } 也可以把以上的less路径写成一个index.less,然后在index.less里去@import各个文件记住！less定义变量时一定要以;结尾记住！less定义变量时一定要以;结尾记住！less定义变量时一定要以;结尾","link":"/2023/01/11/%E5%A6%82%E4%BD%95%E5%9C%A8vue%E9%A1%B9%E7%9B%AE%E4%B8%AD%E5%AE%9A%E4%B9%89%E5%85%AC%E5%85%B1%E7%9A%84less%E5%8F%98%E9%87%8F%EF%BC%8C%E5%9C%A8%E7%BB%84%E4%BB%B6%E4%B8%AD%E4%BD%BF%E7%94%A8/"},{"title":"物理机安装Ubuntu","text":"一，制作U盘启动盘1，下载Ultraliso（软蝶通）2，下载Ubuntu镜像3，打开软蝶通，文件里打开下载的镜像4，点击启动&gt;写入硬盘镜像 开始写入镜像文件 二，安装系统1，进入bios，各型号主板的快捷键不一，具体百度，我的dell是F22，开机直接进入安装，选择语言，键盘布局，时区等等，很简单 三，注意事项1，下载Ubuntu尽量去官网，选择与自己电脑相匹配的镜像（32/64）2，制作启动盘会格式化u盘，建议先备份 有想换工作的同学可以找我内推哦不低于15k（前端，java，测试）","link":"/2023/01/11/%E7%89%A9%E7%90%86%E6%9C%BA%E5%AE%89%E8%A3%85Ubuntu/"},{"title":"记一次企业邮官网SEO优化","text":"背景：百度搜索 网易企业邮箱 会出现m.qiye.163.com 排名在前的问题 解决办法 在pc和m站分别加入 、mobileapplicable-device标注可以帮助百度识别网站是PC站还是M站，给百度提交提交校验识别结果的正确性，减少百度蜘蛛把PC站当成M站，或者把M站当成PC站进行抓取。 在百度站长平台做移动适配 js代码在pc和m站分别判断ua，跳转正确网页 if(is_pc){ window.location.href = 'https://qiye.163.com' + window.location.search; } 推测出现此问题的原因是 我们只在pc站做了3的跳转逻辑 有可能被百度知道了所以导致pc搜关键词直接出移动站","link":"/2023/01/11/%E8%AE%B0%E4%B8%80%E6%AC%A1%E4%BC%81%E4%B8%9A%E9%82%AE%E5%AE%98%E7%BD%91SEO%E4%BC%98%E5%8C%96/"}],"tags":[],"categories":[]}